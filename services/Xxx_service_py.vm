# Python class for service of ${entity.name} 
# Created on 2017-08-29 ( Time 14:38:04 )

from dao.${entity.name}_dao import ${entity.name}Dao
from commons.ListItem_class import ListItem

class ${entity.name}Service:
    def __init__(self):
        self.dao = ${entity.name}Dao()

    def find_by_id(self, $entity.keyAttributesNamesAsString(', ')):
        """
        Tries to find an entity using its Id / Primary Key
        :param $entity.keyAttributesNamesAsString(', '): PK of the entity to find
        :return: False if entity not found, entity if found
        """
        return self.dao.find_by_id($entity.keyAttributesNamesAsString(', '))

    def find_all(self):
        """
        Finds all entities.
        :return:  all entities
        """
        return self.dao.find_all()

    def find_all_list_items(self, $entity.keyAttributesNamesAsString(', ')):
        """
        Finds all entities and select the given id if any
        :return:  all entities
        """

        entities = self.dao.find_all()
        items = []
        for entity in entities:
            selected = False
##
#if( $entity.hasCompositePrimaryKey() )
#set($primaryKeycondition1 = "")
#set($primaryKeycondition2 = "")
#set($primaryKeyValue = "")
#set($strFields = "")
##
#foreach( $field in $entity.keyAttributes )
#if($foreach.count < 2)
#set($primaryKeycondition1 = $field.name + " is not None")
#set($primaryKeycondition2 = "entity." + $field.name + " == int(" + $field.name + ")")
#set($primaryKeyValue = "str(entity.$field.name)")
#else
#set($primaryKeycondition1 = $primaryKeycondition1 + " and " + $field.name + " is not None")
#set($primaryKeycondition2 = $primaryKeycondition2 + " and entity." + $field.name + " == int(" + $field.name + ")")
#set($primaryKeyValue = $primaryKeyValue + " + '|' + str(entity.$field.name)")
##
#foreach( $field in $field.referencedEntity.nonKeyAttributes )
#if($foreach.count < 2)
#set($strFields = "entity.$field.name")
#else
#set($strFields = $strFields + " + ' ' + str(entity.$field.name)")
#end
#end
##
#end
#end
            if ${primaryKeycondition1}:  
                if ${primaryKeycondition2}:  
                    selected = True
            value = $primaryKeyValue
            label = value + " - " + $strFields # all str fields
            item = ListItem(value, label, selected) # item object
#else
            if ${entity.keyAttribute.name} is not None:  
                if entity.${entity.keyAttribute.name} == int(${entity.keyAttribute.name}) :
                    selected = True
            value = str(entity.${entity.keyAttribute.name})
            label = value + " - " + str(entity.${entity.keyAttribute.name})
            item = ListItem(value, label, selected) # item object
#end
            items.append(item.__dict__) # item dictionary : {'value': x, 'label': x, 'selected': x}
            print(item.__dict__) # for DEBUG
        return items

    def insert(self, entity):
        """
        Insert the given entity in the database
        :param entity: to be inserted (supposed to have a valid Id/PK )
        :return: false if not found, entity if found
        """
        return self.dao.insert(entity)

    def update(self, entity):
        """
        Updates the given entity in the database
        :param entity: to be updated (supposed to have a valid Id/PK )
        :return: true if entity updated, false if not found
        """
        return self.dao.update(entity)

    def save(self, entity):
        """
        Updates or creates the given entity in the database
        :param entity: to be updated or created (supposed to have a valid Id/PK )
        :return: json with isNew attribute (True if created) and entity (created or updated)
        """
        return self.dao.save(entity)

    def delete_by_id(self, $entity.keyAttributesNamesAsString(', ')):
        """
        Deletes an entity using its Id / Primary Key
        :param $entity.keyAttributesNamesAsString(', '): PK of the entity to delete
        :return: true if the entity has been deleted, false if not found and not deleted
        """
        return self.dao.delete_by_id($entity.keyAttributesNamesAsString(', '))

    def delete(self, entity):
        """
        Deletes an entity
        :param entity: to delete
        :return: 1 if the entity has been deleted, 0 if not found and not deleted
        """
        return self.dao.delete(entity)

    def exists_by_id(self, $entity.keyAttributesNamesAsString(', ')):
        """
        Ckeck if an Id / Primary Key is in the entity table
        :param $entity.keyAttributesNamesAsString(', '): PK to check in database
        :return: true or false
        """
        return self.dao.exists_by_id($entity.keyAttributesNamesAsString(', '))

    def exists(self, entity):
        """
        Ckeck if an entity is in the entity table
        :return: true or false
        """
        return self.dao.exists(entity)

    def count_all(self):
        """
        Counts all the entity present in the entity table
        :return: the number of rows in the entity table
        """
        return self.dao.count_all()
